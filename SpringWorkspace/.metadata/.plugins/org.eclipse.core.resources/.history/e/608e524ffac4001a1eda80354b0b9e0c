package com.csslect.app.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.csslect.app.dto.ANDto;
import com.csslect.app.dto.MemberDTO;
import com.csslect.app.dto.NaverMemberDTO;
import com.csslect.app.dto.KakaoMemberDTO;

public class ANDao {

	DataSource dataSource;

	public ANDao() {
		try {
			Context context = new InitialContext();
			dataSource = (DataSource) context.lookup("java:/comp/env/cteam");
			/* dataSource = (DataSource) context.lookup("java:/comp/env/CSS"); */
		} catch (NamingException e) {
			e.getMessage();
		}

	}

	// 오토메딕 앱 로그인
	public MemberDTO anLogin(String member_email, String member_password) {
		System.out.println("로그인들어옴");
		MemberDTO adto = null;
		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		try {
			connection = dataSource.getConnection();
			String query = "select * " + " from manage_member" + " where member_email = '" + member_email
					+ "' and member_password = '" + member_password + "' ";
			prepareStatement = connection.prepareStatement(query);
			resultSet = prepareStatement.executeQuery();

			while (resultSet.next()) {
				member_email = resultSet.getString("member_email");
				String member_nickname = resultSet.getString("member_nickname");
				String member_phonenum = resultSet.getString("member_phonenum");

				adto = new MemberDTO(member_email, member_nickname, member_phonenum);
			}

			System.out.println("MemberDTO member_email : " + adto.getMember_email());

		} catch (Exception e) {

			System.out.println(e.getMessage());
		} finally {
			try {

				if (resultSet != null) {
					resultSet.close();
				}
				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return adto;

	}

	// 오토메딕 앱 이메일체크
	public MemberDTO anEmailChk(String member_email) {
		System.out.println("이메일체크들어옴");

		MemberDTO adto = null;
		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		try {
			connection = dataSource.getConnection();
			String query = "select * " + " from manage_member" + " where member_email = '" + member_email + "'";
			prepareStatement = connection.prepareStatement(query);
			resultSet = prepareStatement.executeQuery();

			while (resultSet.next()) {
				member_email = resultSet.getString("member_email");
				String member_nickname = resultSet.getString("member_nickname");
				String member_phonenum = resultSet.getString("member_phonenum");

				adto = new MemberDTO(member_email, member_nickname, member_phonenum);
			}

			System.out.println("MemberDTO member_email : " + adto.getMember_email());

		} catch (Exception e) {

			System.out.println(e.getMessage());
		} finally {
			try {

				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return adto;

	}

	// 오토메딕 앱 닉네임체크
	public MemberDTO anNickNameChk(String member_nickname) {
		System.out.println("닉네임체크들어옴");

		MemberDTO adto = null;
		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		try {
			connection = dataSource.getConnection();
			String query = "select * " + " from manage_member" + " where member_nickname = '" + member_nickname + "'";
			prepareStatement = connection.prepareStatement(query);
			resultSet = prepareStatement.executeQuery();

			while (resultSet.next()) {
				member_nickname = resultSet.getString("member_nickname");

				adto = new MemberDTO(member_nickname);
			}

			System.out.println("MemberDTO member_nickname : " + adto.getMember_nickname());

		} catch (Exception e) {

			System.out.println(e.getMessage());
		} finally {
			try {

				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return adto;

	}

	// 오토메딕 앱 회원가입
	public int anJoin(String member_email, String member_password, String member_nickname, String member_phonenum) {

		Connection connection = null;
		PreparedStatement prepareStatement = null;
		int state = -100;

		try {
			connection = dataSource.getConnection();
			String query = "insert into manage_member(member_email, member_password, member_nickname, member_phonenum) "
					+ "values('" + member_email + "', '" + member_password + "', '" + member_nickname + "', '"
					+ member_phonenum + "')";
			prepareStatement = connection.prepareStatement(query);
			state = prepareStatement.executeUpdate();

			if (state > 0) {
				System.out.println(state + "삽입성공");
			} else {
				System.out.println(state + "삽입실패");
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {

				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return state;

	}

	// 네이버 로그인
	public NaverMemberDTO anNaverLogin(String naver_email, String naver_nickname) {
		System.out.println("네이버 로그인들어옴");
		NaverMemberDTO adto = null;
		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		try {
			connection = dataSource.getConnection();
			String query = "select * " + " from naver_member" + " where naver_email = '" + naver_email
					+ "' and naver_nickname = '" + naver_nickname + "' ";
			prepareStatement = connection.prepareStatement(query);
			resultSet = prepareStatement.executeQuery();

			while (resultSet.next()) {
				naver_email = resultSet.getString("naver_email");
				naver_nickname = resultSet.getString("naver_nickname");

				adto = new NaverMemberDTO(naver_email, naver_nickname);
			}

			System.out.println("NaverMemberDTO naver_email : " + adto.getNaver_email());
			System.out.println("NaverMemberDTO naver_nickname : " + adto.getNaver_nickname());

		} catch (Exception e) {

			System.out.println(e.getMessage());
		} finally {
			try {

				if (resultSet != null) {
					resultSet.close();
				}
				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return adto;

	}

	// 네이버 회원가입
	public int anNaverJoin(String naver_email, String naver_nickname) {
		System.out.println("네이버회원가입 들어옴");
		System.out.println("네이버이메일" + naver_email);
		System.out.println("네이버닉네임" + naver_nickname);
		Connection connection = null;
		PreparedStatement prepareStatement = null;
		int state = -100;

		try {
			connection = dataSource.getConnection();
			String query = "insert into naver_member(naver_email, naver_nickname) " + "values('" + naver_email + "', '"
					+ naver_nickname + "')";
			prepareStatement = connection.prepareStatement(query);
			state = prepareStatement.executeUpdate();

			if (state > 0) {
				System.out.println(state + "네아로 회원가입 삽입성공");
			} else {
				System.out.println(state + "네아로 회원가입 삽입실패");
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {

				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return state;
	}

	// 카카오 로그인
	public KakaoMemberDTO anKakaoLogin(String kakao_email, String kakao_nickname) {
		System.out.println("카카오 로그인들어옴");
		KakaoMemberDTO adto = null;
		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		try {
			connection = dataSource.getConnection();
			String query = "select * " + " from kakao_member" + " where kakao_email = '" + kakao_email
					+ "' and kakao_nickname = '" + kakao_nickname + "' ";
			prepareStatement = connection.prepareStatement(query);
			resultSet = prepareStatement.executeQuery();

			while (resultSet.next()) {
				kakao_email = resultSet.getString("kakao_email");
				kakao_nickname = resultSet.getString("kakao_nickname");

				adto = new KakaoMemberDTO(kakao_email, kakao_nickname);
			}

			System.out.println("KakaoMemberDTO kakao_email : " + adto.getKakao_email());
			System.out.println("KakaoMemberDTO kakao_nickname : " + adto.getKakao_nickname());

		} catch (Exception e) {

			System.out.println(e.getMessage());
		} finally {
			try {

				if (resultSet != null) {
					resultSet.close();
				}
				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return adto;

	}

	// 카카오 회원가입
	public int anKakaoJoin(String kakao_email, String kakao_nickname) {
		System.out.println("카카오회원가입 들어옴");
		System.out.println("카카오이메일" + kakao_email);
		System.out.println("카카오닉네임" + kakao_nickname);
		Connection connection = null;
		PreparedStatement prepareStatement = null;
		int state = -100;

		try {
			connection = dataSource.getConnection();
			String query = "insert into kakao_member(kakao_email, kakao_nickname) " + "values('" + kakao_email + "', '"
					+ kakao_nickname + "')";
			prepareStatement = connection.prepareStatement(query);
			state = prepareStatement.executeUpdate();

			if (state > 0) {
				System.out.println(state + "카카오 회원가입 삽입성공");
			} else {
				System.out.println(state + "카카오 회원가입 삽입실패");
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {

				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return state;
	}

	public ArrayList<ANDto> anSelectMulti() {

		ArrayList<ANDto> adtos = new ArrayList<ANDto>();
		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		try {
			connection = dataSource.getConnection();
			String query = "select id, name, hire_date, image_path " + " from android" + " order by id desc"; // DB에서
																												// 정렬을
																												// 먼저 하고
																												// 보내줄것.
																												// 아이디가
																												// int니까
																												// 아이디가
																												// 높은것을
																												// 최 상단에
																												// 넣기로
			prepareStatement = connection.prepareStatement(query);
			resultSet = prepareStatement.executeQuery();

			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String name = resultSet.getString("name");
				Date date = resultSet.getDate("hire_date");
				String imagePath = resultSet.getString("image_path");

				ANDto adto = new ANDto(id, name, date, imagePath);
				adtos.add(adto);
			}

			System.out.println("adtos크기" + adtos.size());

		} catch (Exception e) {

			System.out.println(e.getMessage());
		} finally {
			try {

				if (resultSet != null) {
					resultSet.close();
				}
				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return adtos;

	}

	public int anInsertMulti(int id, String name, String date, String dbImgPath) {

		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		int state = -1;

		try {
			//
			connection = dataSource.getConnection();
			String query = "insert into android(id, name, hire_date, image_path) " + "values(" + id + ",'" + name + "',"
					+ "to_date('" + date + "','rr/mm/dd') , '" + dbImgPath + "' )";

			prepareStatement = connection.prepareStatement(query);
			state = prepareStatement.executeUpdate();

			if (state > 0) {
				System.out.println(state + "삽입성공");
			} else {
				System.out.println(state + "삽입실패");
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			}

		}

		return state;

	}

	public int anUpdateMulti(int id, String name, String date, String dbImgPath) {

		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		int state = -1;

		try {
			// 아이디는 수정할수 없음
			connection = dataSource.getConnection();
			String query = "update android set " + " name = '" + name + "' " + ", hire_date = '" + date + "' "
					+ ", image_path = '" + dbImgPath + "' " + " where id = " + id;

			prepareStatement = connection.prepareStatement(query);
			state = prepareStatement.executeUpdate();

			if (state > 0) {
				System.out.println("수정1성공");

			} else {
				System.out.println("수정1실패");
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return state;

	}

	public int anUpdateMultiNo(int id, String name, String date) {

		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		int state = -1;

		try {
			// 아이디는 수정할수 없음
			connection = dataSource.getConnection();
			String query = "update android set " + " name = '" + name + "' " + ", hire_date = '" + date + "' "
					+ " where id = " + id;

			prepareStatement = connection.prepareStatement(query);
			state = prepareStatement.executeUpdate();

			if (state > 0) {
				System.out.println("수정2성공");

			} else {
				System.out.println("수정2실패");
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			} finally {

			}
		}

		return state;
	}

	public int anDeleteMulti(int id) {

		Connection connection = null;
		PreparedStatement prepareStatement = null;
		ResultSet resultSet = null;

		int state = -1;

		try {
			connection = dataSource.getConnection();
			String query = "delete from android where id=" + id;

			System.out.println(id);

			prepareStatement = connection.prepareStatement(query);
			state = prepareStatement.executeUpdate();

			if (state > 0) {
				System.out.println("삭제성공");
			} else {
				System.out.println("삭제실패");
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (resultSet != null) {
					resultSet.close();
				}
				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return state;

	}
	
	public int alarmInsert(String id, String passwd, String name, String phonenumber, String address, String alarm_Tuesday, String alarm_Wednesday, String alarm_Thursday, String alarm_Friday, String alarm_Saturday, String alarm_Times, String alarm_Ringtime1_Hour, String alarm_Ringtime1_Minute, String alarm_Ringtime2_Hour, String alarm_Ringtime2_Minute, String alarm_Ringtime3_Hour, String alarm_Ringtime3_Minute, String alarm_Volume, String alarm_Bell, String alarm_Vib, String alarm_Repeat) {
		Connection connection = null;
		PreparedStatement prepareStatement = null;
		int state = -100;

		try {
			connection = dataSource.getConnection();
			String query = "insert into member(id, passwd, name, phonenumber, address) " + "values('" + id + "', '"
					+ passwd + "', '" + name + "', '" + phonenumber + "', '" + address + "' )";
			prepareStatement = connection.prepareStatement(query);
			state = prepareStatement.executeUpdate();

			if (state > 0) {
				System.out.println(state + "삽입 성공");
			} else {
				System.out.println(state + "삽입 실패");
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (prepareStatement != null) {
					prepareStatement.close();
				}
				if (connection != null) {
					connection.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return state;
	}
}
